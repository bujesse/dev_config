set surround
set easymotion
set commentary
set exchange  " cx/cxx/X/cxc
set ReplaceWithRegister  " gr/grr
set highlightedyank
set virtualedit=onemore
set ideajoin
set ideamarks
set idearefactormode=keep
set ideavimsupport=dialog,singleline

let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)

" Section: SET CONFIGS
    let mapleader=","

    set autoindent
    set autoread
    set backspace=indent,eol,start
    set belloff=all
    set breakindent                             " Wrap long lines *with* indentation
    set breakindentopt=shift:2
    set completeopt=menu,menuone,noinsert,noselect
    set encoding=UTF-8
    set foldlevelstart=20
    set foldmethod=indent
    set foldopen+=search,undo,quickfix,jump
    set gdefault                                " Always do global substitutes
    set hidden                                  " Switch to another buffer without writing or abandoning changes
    set history=200                             " Keep 200 changes of undo history
    set hlsearch
    set ignorecase
    set incsearch
    set infercase                               " Smart casing when completing
    set nojoinspaces                            " No to double-spaces when joining lines
    set number relativenumber                   " Relative numbering (toggle with yor)
    set regexpengine=1                          " Somehow this makes syntax highlighting in vim 100x faster
    set scrolloff=8                             " Start scrolling when we're 8 lines away from margins
    set showbreak=â†³                             " Use this to wrap long lines
    set sidescroll=1
    set smartcase
    set smarttab
    set tabstop=4 shiftwidth=4 expandtab softtabstop=4
    set termguicolors                           " Enable 24-bit color support for terminal Vim
    set textwidth=0 wrapmargin=0                " No auto-newline
    set timeoutlen=1000
    set ttimeoutlen=10
    set ttyfast


" Section: IDEAVIM actions
    :map ]m <Action>(MethodDown)
    :map [m <Action>(MethodUp)

    " Hack to jump to top-level class for function
    nnoremap [[ ?\(^class \\\|^def \)<cr>:noh<cr>
    nnoremap ]] /\(^class \\\|^def \)<cr>:noh<cr>

    :map <Leader>x <Action>(CloseContent)
    :map gh <Action>(ShowErrorDescription)

    " vim-abolish
        :map crs <Action>(StringManipulation.ToSnakeCaseOrCamelCase)
        :map crc <Action>(StringManipulation.ToSnakeCaseOrCamelCase)
        :map crs <Action>(StringManipulation.ToSnakeCaseOrCamelCase)
        :map crc <Action>(StringManipulation.ToSnakeCaseOrCamelCase)

    " vim-visual-star-search
        xnoremap * "zy/<C-R>z<CR>

    " vim-unimpaired
        nnoremap [<space> O<esc>j
        nnoremap ]<space> o<esc>k
        :map ]b <Action>(NextTab)
        :map [b <Action>(PreviousTab)

    " LSC
        :map ]r <Action>(GotoNextElementUnderCaretUsage)
        :map [r <Action>(GotoPrevElementUnderCaretUsage)

    " Git-gutter
        " Move to next/prev hunk. The extra actions are to not activate the change preview window
        :map [g <Action>(VcsShowPrevChangeMarker) <Action>(EditorDown) <Action>(EditorUp)
        :map ]g <Action>(VcsShowNextChangeMarker) <Action>(EditorDown) <Action>(EditorUp)
        " This activates the change preview window
        :map <Leader>P <Action>(VcsShowCurrentChangeMarker)
        " Rollback hunk at the cursor
        :map <Leader>- <Action>(Vcs.RollbackChangedLines)

    " vim-fugitive
        :map <silent> <Leader>B <Action>(Annotate)

    " ALE refactoring
        :map <Leader>af <Action>(ReformatCode)

    " Refactoring
        :map Rm <Action>(RefactoringMenu)
        :map Rr <Action>(RenameElement)

    " Navigation
        :map <Leader>m <Action>(RecentFiles)
        :map <Leader>n <Action>(ActivateProjectToolWindow)
        :map <Leader>f <Action>(FindInPath)

    " Debugging
        :map <Space><Space> <Action>(DebugMainMenu)
        :map <Space>dd <Action>(Debug)
        :map <Space>dn <Action>(DebugClass)
        :map <Space>dl <Action>(Rerun)

        :map <Space>b <Action>(ToggleLineBreakpoint)
        :map <Space>e <Action>(EditBreakpoint)
        :map <Space>wiw viw<Action>(Debugger.AddToWatch)
        :map <Space>ww V<Action>(Debugger.AddToWatch)
        :map <Space>W v$<Action>(Debugger.AddToWatch)
        :map <Space>wv <Action>(Debugger.AddToWatch)

        :map <Space>i <Action>(StepInto)
        :map <Space>o <Action>(StepOut)
        :map <Space>n <Action>(StepOver)
        :map <Space>j <Action>(RunToCursor)
        :map <Space>c <Action>(Resume)

    " Testing
        :map gt <Action>(GotoTest)


" Section: CONFIGS FROM VIMRC
    map <leader>/ :noh<CR>

    " Don't make the visual colors reversed
    highlight Visual cterm=NONE

    " display line movements unless preceded by a count. Also only add to jumplist if movement greater than 5
    nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
    nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

    imap jk <Esc>
    imap Jk <Esc>
    imap jK <Esc>
    imap JK <Esc>

    imap kj <Esc>
    imap Kj <Esc>
    imap kJ <Esc>
    imap KJ <Esc>

    command WQ wq
    command Wq wq
    command W w
    command Q q

    nnoremap <c-l> <c-w>l
    nnoremap <c-j> <c-w>j
    nnoremap <c-h> <c-w>h
    nnoremap <c-k> <c-w>k

    " Y should behave like D and C
    noremap Y y$

    " U feels like a more natural companion to u
    nnoremap U <C-r>

    " Quick source
    nnoremap <Leader>. :source ~/.ideavimrc<cr>

" Section: CUSTOM MACROS
    " replace with yank
    nmap <Leader>v griw
    xmap <Leader>v gr

    " replace with cut
    nnoremap <Leader>c "_ciw<C-r>-<Esc>
    xnoremap <Leader>c "_c<C-r>-<Esc>

    " python timer
    nnoremap <Leader>gt yy<ESC>PCimport time; start = time.time()<ESC>joprint(time.time() - start)<ESC>

    " format entire file
    nnoremap <Leader>= gg=G<C-o>
