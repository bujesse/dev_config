set surround
set easymotion
set commentary
set exchange

let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)

" Section: SET CONFIGS
    let mapleader=","

    set autoindent
    set autoread
    set backspace=indent,eol,start
    set belloff=all
    set breakindent                             " Wrap long lines *with* indentation
    set breakindentopt=shift:2
    set completeopt=menu,menuone,noinsert,noselect
    set encoding=UTF-8
    set foldlevelstart=20
    set foldmethod=indent
    set foldopen+=search,undo,quickfix,jump
    set gdefault                                " Always do global substitutes
    set hidden                                  " Switch to another buffer without writing or abandoning changes
    set history=200                             " Keep 200 changes of undo history
    set hlsearch
    set ignorecase
    set incsearch
    set infercase                               " Smart casing when completing
    set nojoinspaces                            " No to double-spaces when joining lines
    set number relativenumber                   " Relative numbering (toggle with yor)
    set regexpengine=1                          " Somehow this makes syntax highlighting in vim 100x faster
    set scrolloff=8                             " Start scrolling when we're 8 lines away from margins
    set showbreak=â†³                             " Use this to wrap long lines
    set sidescroll=1
    set smartcase
    set smarttab
    set tabstop=4 shiftwidth=4 expandtab softtabstop=4
    set termguicolors                           " Enable 24-bit color support for terminal Vim
    set textwidth=0 wrapmargin=0                " No auto-newline
    set timeoutlen=1000
    set ttimeoutlen=10
    set ttyfast


" Section: IDEAVIM actions
    nnoremap ]m :action MethodDown<cr>
    nnoremap [m :action MethodUp<cr>

    " Hack to jump to top-level class for function
    nnoremap [[ ?\(^class \\\|^def \)<cr>:noh<cr>
    nnoremap ]] /\(^class \\\|^def \)<cr>:noh<cr>

    nnoremap <Leader>x :action CloseContent<cr>
    nnoremap gh :action ShowErrorDescription<cr>

    " vim-abolish
        nnoremap crs :action StringManipulation.ToSnakeCaseOrCamelCase<CR>
        nnoremap crc :action StringManipulation.ToSnakeCaseOrCamelCase<CR>
        xnoremap crs :action StringManipulation.ToSnakeCaseOrCamelCase<CR>
        xnoremap crc :action StringManipulation.ToSnakeCaseOrCamelCase<CR>

    " vim-visual-star-search
        xnoremap * "zy/<C-R>z<CR>

    " vim-unimpaired
        nnoremap [<space> O<esc>j
        nnoremap ]<space> o<esc>k
        nnoremap ]b :action NextTab<cr>
        nnoremap [b :action PreviousTab<cr>

    " LSC
        nnoremap ]r :action GotoNextElementUnderCaretUsage<CR>
        nnoremap [r :action GotoPrevElementUnderCaretUsage<CR>

    " Git-gutter
        " Move to next/prev hunk. The extra actions are to not activate the change preview window
        nnoremap [g :action VcsShowPrevChangeMarker<cr>:action EditorDown<cr>:action EditorUp<cr>
        nnoremap ]g :action VcsShowNextChangeMarker<cr>:action EditorDown<cr>:action EditorUp<cr>
        " This activates the change preview window
        nnoremap <Leader>P :action VcsShowCurrentChangeMarker<cr>
        " Rollback hunk at the cursor
        nnoremap <Leader>- :action Vcs.RollbackChangedLines<cr>

    " vim-fugitive
        nnoremap <silent> <Leader>B :action Annotate<CR>

    " ALE refactoring
        nnoremap <Leader>af :action ReformatCode<CR>

    " Refactoring
        nnoremap Rm :action RefactoringMenu<cr>
        nnoremap Rr :action RenameElement<cr>

    " Navigation
        nnoremap <Leader>m :action RecentFiles<cr>
        nnoremap <Leader>n :action ActivateProjectToolWindow<cr>
        nnoremap <Leader>f :action FindInPath<cr>

    " Debugging
        nnoremap <Space><Space> :action DebugMainMenu<cr>
        nnoremap <Space>dd :action Debug<cr>
        nnoremap <Space>dn :action DebugClass<cr>
        nnoremap <Space>dl :action Rerun<cr>

        nnoremap <Space>b :action ToggleLineBreakpoint<cr>
        nnoremap <Space>e :action EditBreakpoint<cr>
        nnoremap <Space>w viw:action Debugger.AddToWatch<cr>
        xnoremap <Space>w :action Debugger.AddToWatch<cr>

        nnoremap <Space>i :action StepInto<cr>
        nnoremap <Space>o :action StepOut<cr>
        nnoremap <Space>n :action StepOver<cr>
        nnoremap <Space>j :action RunToCursor<cr>
        nnoremap <Space>c :action Resume<cr>


" Section: CONFIGS FROM VIMRC
    map <leader>/ :noh<CR>

    " Don't make the visual colors reversed
    highlight Visual cterm=NONE

    " display line movements unless preceded by a count. Also only add to jumplist if movement greater than 5
    nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
    nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

    imap jk <Esc>
    imap Jk <Esc>
    imap jK <Esc>
    imap JK <Esc>

    imap kj <Esc>
    imap Kj <Esc>
    imap kJ <Esc>
    imap KJ <Esc>

    command WQ wq
    command Wq wq
    command W w
    command Q q

    nnoremap <c-l> <c-w>l
    nnoremap <c-j> <c-w>j
    nnoremap <c-h> <c-w>h
    nnoremap <c-k> <c-w>k

    " Y should behave like D and C
    noremap Y y$

    " U feels like a more natural companion to u
    nnoremap U <C-r>

    " Quick source
    nnoremap <Leader>. :source ~/.ideavimrc<cr>

" Section: CUSTOM MACROS
    " replace with yank
    nnoremap <Leader>v ciw<C-r>0<Esc>
    xnoremap <Leader>v c<C-r>0<Esc>

    " replace with cut
    nnoremap <Leader>c "_ciw<C-r>-<Esc>
    xnoremap <Leader>c "_c<C-r>-<Esc>
